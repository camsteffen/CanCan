{"tagline":"A solver and generator of KenKen puzzles","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Cancan","body":"CanCan is a program that generates and solves KenKen puzzles.\r\n\r\n[KenKen](http://www.kenken.com) is a math puzzle in which the objective is to fill in every cell in a square *n* x *n* grid with a number.\r\nThe numbers in all the rows and columns must be unique.\r\n(So a solved KenKen puzzle is a [Latin Square](http://en.wikipedia.org/wiki/Latin_square).)\r\nAdditionally contiguous cells are grouped into blocks called cages, and the sum, product, quotient or difference of the numbers in each cage must equal a target value.\r\nHere is a typical puzzle with its solution.\r\n\r\n![A solved KenKen puzzle](http://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/KenKenSolution.svg/250px-KenKenSolution.svg.png)\r\n\r\nKenKen can be approached as a problem in constraint satisfaction.\r\nAdopting the nomenclature used in ([Crook 2009](#crook2009)), a *markup* is an assignment of sets of numbers from 1 to n to each cell.\r\nThe set of possible markups defines the search space.\r\nThis space may be visualized as a graph where a directed edge points from one markup to another with a single value assigned to one of the cells.\r\nThe subgraph for a given permutation of cells defines a tree.\r\nSince there are *n*<sup>2</sup>(2<sup>*n*</sup>-1) possible markups and *n*<sup>3</sup> possible solutions, an exhaustive search of the space is intractable.\r\nHowever, after we cross each edge in the graph (including an initial null edge that leads to the start state) we can apply all the constraints, which eliminates values from the markups.\r\nThe algorithm to find a solution is therefore a depth-first search of a markup tree with constraint propagation at each step.\r\n\r\nKenKen generation primarily an exercise in tiling the square with cages. An algorithm that does this is as follows.\r\n\r\n1. Generate a random Latin Square as the solution of the puzzle.\r\n2. Make an undirected graph whose vertices are cells and whose edges are randomly assigned between adjacent cells.\r\n3. Partition this graph into its connected components, limiting each component to a randomly chosen maximum size. These are the cages.\r\n4. To each cage randomly assign an arithmetic operator (+, -, รท, ร) and calculate the corresponding target value. For 1-cell cages, the target value is just the value in the cell.\r\n\r\nYou need a distribution over cage sizes from which to sample in step (2).\r\nIts exact values are manually adjusted to produce a range of cage sizes that makes for interesting puzzles.\r\nNote that as a grid gets filled in, larger cages will not fit inside the remaining space, so the resulting empirical distribution of cage sizes will skew smaller than the one used for sampling.\r\nIt is also easy to end up with puzzles containing a large number of single-cell cages.\r\nThese tend to be too easy to solve, so it helps to filter out generated puzzles with a proportion of single-cell cages above some maximum.\r\nFinally there is no guarantee that a given set of cage constraints will have a unique solution.\r\nIn order to guarantee uniqueness each puzzle generated in step (4) must then be solved and ones with more than one solution discarded.\r\n\r\nKenKen can be thought of as a generalization of Sudoku puzzles.\r\nPeter Norvig has a [Sudoku solver](http://norvig.com/sudoku.html) which uses the same constraint propagation algorithm.\r\nMichael Heyeck has written a KenKen solver in Python called [neknek](http://www.mlsite.net/neknek).\r\nCanCan can write puzzles in the format recognized by neknek.\r\n\r\nHere is a set of over [40,000 KenKen puzzles](https://docs.google.com/folder/d/0B1KTYK5LG8lXendkT3R0VERxQXM/edit) of sizes ranging from 4x4 to 9x9 with unique solutions.\r\n\r\nReferences\r\n==========\r\n<a href=\"http://www.ams.org/notices/200904/tx090400460p.pdf\" id=\"crook2009\">J.F. Crook, \"A pencil-and-paper algorithm for solving Sudoku puzzles\", *Notices of the American Mathematical Society*, April 2009, Volume 56, Number 4, pp. 460-468</a>\r\n"}