{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"CanCan - a KenKen Solver and Generator\r\n======================================\r\n\r\n![Can Can dancers](http://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/Lautrec_la_troupe_de_mlle_eglantine_%28poster%29_1895-6.jpg/317px-Lautrec_la_troupe_de_mlle_eglantine_%28poster%29_1895-6.jpg)\r\n\r\nCanCan is a solver and generator of [KenKen](http://www.kenken.com) puzzles.\r\n\r\nThe objective of KenKen puzzles is to completely fill an _n_ x _n_ grid with the numbers 1 to _n_.\r\nEach row and column must contain a unique set of numbers.\r\n(Thus a solved KenKen puzzle is a [Latin Square](http://en.wikipedia.org/wiki/Latin_square).)\r\nAdditionally, cells in the grid are grouped into sets called _cages_, and the sets of numbers in these cages must have certain arithmetic properties.\r\n\r\nCanCan uses constraint propagation and parallel execution solve and generate puzzles of arbitrary size.\r\n\r\nReferences\r\n----------\r\n\r\nKenKen is a cousin of [Sudoku](http://en.wikipedia.org/wiki/Sudoku), and the algorithm implemented here is based on Peter Norvig's [Sudoku solver](http://norvig.com/sudoku.html).\r\n\r\nA.M. Herzberg and M.R. Murty, \"Sudoku squares and chromatic polynomials\", *Notices of the American Mathematical Society*, June/July 2007, pp. 708-717\r\n\r\nMichael Heyeck has written a KenKen solver in Python called [neknek](http://www.mlsite.net/neknek).\r\nCanCan can write puzzles in the format recognized by neknek.\r\n\r\nCharles Colbourn, \"The complexity of completing partial Latin squares\", *Discrete Applied Mathematics*, April 1984, Volume 8, Issue 1, pp. 25-30\r\n\r\nJ.F. Cook, \"A pencil-and-paper algorithm for solving Sudoku puzzles\", *Notices of the American Mathematical Society*, April 2009, Volume 56, Number 4, pp. 460-468\r\n","name":"Cancan","tagline":"A solver and generator of KenKen puzzles"}