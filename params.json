{"tagline":"A solver and generator of KenKen puzzles","body":"CanCan - a KenKen Solver and Generator\r\n======================================\r\n\r\n![Can Can dancers](http://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/Lautrec_la_troupe_de_mlle_eglantine_%28poster%29_1895-6.jpg/317px-Lautrec_la_troupe_de_mlle_eglantine_%28poster%29_1895-6.jpg)\r\n\r\nCanCan is a solver and generator of [KenKen](http://www.kenken.com) puzzles.\r\n\r\nThe objective of KenKen puzzles is to completely fill an _n_ x _n_ grid with the numbers 1 to _n_.\r\nEach row and column must contain a unique set of numbers.\r\n(Thus a solved KenKen puzzle is a [Latin Square](http://en.wikipedia.org/wiki/Latin_square).)\r\nAdditionally, cells in the grid are grouped into sets called _cages_, and the sets of numbers in these cages must have certain arithmetic properties.\r\n\r\nCanCan is built with the [Simple Build Tool](http://www.scala-sbt.org).\r\nThe `sbt assembly` command builds an executable .JAR file.\r\nRun the default executable without any arguments to see help.\r\n\r\nThe `solve` command solves a set of puzzles.\r\n\r\n    > java -jar target/CanCan-assembly-1.0.jar solve puzzles/6x6.1\r\n    1.\r\n    a=60x b=4+ c=16+ d=45x e=40x f=72x g=4x h=11+ i=4- j=12+ k=12x l=5 m=8+ n=2\r\n    a b b c c d\r\n    a b e c d d\r\n    a f e e g g\r\n    f f h i j g\r\n    k l h i j j\r\n    k k h m m n\r\n\r\n    5 2 1 4 6 3\r\n    2 1 4 6 3 5\r\n    6 3 5 2 1 4\r\n    4 6 3 5 2 1\r\n    3 5 2 1 4 6\r\n    1 4 6 3 5 2\r\n\r\nThe `generate` command generates a set of puzzles of a specified size.\r\n\r\n\t> java -jar target/CanCan-assembly-1.0.jar generate 2 5\r\n    # 1.\r\n    a=9+ b=48x c=5 d=8x e=10x f=8+ g=8+ h=8x i=6x j=2-\r\n    a b b c d\r\n    a b e e d\r\n    a f f g d\r\n    h f i g j\r\n    h h i g j\r\n    # 1 3 4 5 2\r\n    # 3 4 5 2 1\r\n    # 5 2 1 3 4\r\n    # 4 5 2 1 3\r\n    # 2 1 3 4 5\r\n    # Difficulty: 1\r\n\r\n    # 2.\r\n    a=10+ b=4- c=8+ d=8+ e=24x f=11+ g=5+ h=10x i=3 j=3-\r\n    a b b c c\r\n    a d d c e\r\n    a d f e e\r\n    g f f h h\r\n    g i j j h\r\n    # 2 5 1 4 3\r\n    # 3 2 5 1 4\r\n    # 5 1 4 3 2\r\n    # 1 4 3 2 5\r\n    # 4 3 2 5 1\r\n    # Difficulty: 1\r\n\r\n    # Cage size, Single cell cage proportion, Associative probability\r\n    # [0:0.000, 1:0.050, 2:0.350, 3:0.350, 4:0.200, 5:0.050], 0.200, 0.333\r\n    # Unique solutions, maximum search 1000\r\n    # Average difficulty: 1.000\r\n    # Cage Size Macro Average:\r\n    # 1: 0.100\r\n    # 2: 0.300\r\n    # 3: 0.600\r\n\r\nThe `analyze` command inspects the details of the search procedure used to solve a set of puzzles.\r\n\r\nIn the build directory the `sbt run` command can also be used to run the program.\r\n\r\nReferences\r\n----------\r\n\r\nKenKen is a cousin of [Sudoku](http://en.wikipedia.org/wiki/Sudoku), and the algorithm implemented here is based on Peter Norvig's [Sudoku solver](http://norvig.com/sudoku.html).\r\n\r\nA.M. Herzberg and M.R. Murty, \"Sudoku squares and chromatic polynomials\", *Notices of the American Mathematical Society*, June/July 2007, pp. 708-717\r\n\r\nMichael Heyeck has written a KenKen solver in Python called [neknek](http://www.mlsite.net/neknek).\r\nCanCan can write puzzles in the format recognized by neknek.\r\n\r\nCharles Colbourn, \"The complexity of completing partial Latin squares\", *Discrete Applied Mathematics*, April 1984, Volume 8, Issue 1, pp. 25-30\r\n\r\nJ.F. Cook, \"A pencil-and-paper algorithm for solving Sudoku puzzles\", *Notices of the American Mathematical Society*, April 2009, Volume 56, Number 4, pp. 460-468\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Cancan"}